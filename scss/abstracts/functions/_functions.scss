// Return var(--color)
// =========================
@function var-color($name) {

  @if map-has-key($_colors, $name) {
    @return var(--#{$name});
  }

  @error "Sorry, the key #{$name} not exist in $_colors";
  @return null;
}

// Find the best contrast color compared to a color
// =========================
@function get-contrast-text($base-color) {

  $color-brightness: round((red($base-color) * 299) + (green($base-color) * 587) + (blue($base-color) * 114) / 1000);
  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);

  @if abs($color-brightness) < ($light-color/2){
    @return $_contrast-high;
  }

  @return $_contrast-low;
}

// Add property in placeholder list
// =========================
@function add-placeholder($property, $value, $selector) {

  // La propriete existe deja
  @if map-has-key($_placeholders, $property) {

    $valueAndSelectors : map-get($_placeholders, $property);

    // Property $property : $value; exist
    @if map-has-key($valueAndSelectors, $value) {

      $selectors : map-get($valueAndSelectors, $value);

      $selectors : ($selectors + ', '+ $selector);
      $valueAndSelectors : map-merge($valueAndSelectors, ($value: $selectors));
    } @else {
      $valueAndSelectors : map-merge($valueAndSelectors, ($value : $selector));
    }

    // Update placeholder list
    $_placeholders : map-merge($_placeholders, ($property : $valueAndSelectors)) !global;

  } @else {

    // Property $property not exist
    $_placeholders : map-merge($_placeholders, ($property : ($value: $selector))) !global;
  }

  @return true;
}